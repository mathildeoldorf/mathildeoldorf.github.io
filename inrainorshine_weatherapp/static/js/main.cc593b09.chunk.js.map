{"version":3,"sources":["components/Search/Search.js","components/Loader/Loader.js","pages/CurrentWeather/CurrentWeather.js","pages/Forecast/SingleForecast.js","pages/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","city","undefined","isLoading","results","handleShowSearchResults","input","length","document","querySelector","classList","add","remove","handleClearSearch","result","setState","value","setTimeout","handleSendSearchRequestData","props","parentCallbackSearchData","event","target","searchResults","Axios","get","data","suggestions","map","singleSuggestion","matchLevel","address","county","singleSuggestionData","name","country","getCountryISO2","countryCode","push","this","className","type","placeholder","onChange","handleFetchSearchResults","onClick","index","key","Component","Loader","color","loading","Forecast","_isMounted","handleLoading","handleConvertDate","unixDate","date","dateObj","Date","dateStr","toDateString","slice","time","toTimeString","day","handleWeatherType","weather","iconToRender","handleCapitalizeString","description","desc","charAt","toUpperCase","aTemp","fTemp","wind","SingleForecast","forecastData","APIkey","Key","currentForecastList","handleSearchInput","handleFetchForecastData","handleRenderSingleForecast","singleForecast","fiveDayForecastListData","list","dt","main","temp","feels_like","minTemp","temp_min","maxTemp","temp_max","humidity","clouds","all","speed","sunrise","sunset","App","handleCallbackFunctionSearchData","childDataSearch","handleFetchCurrentWeatherData","handleCallBackFunctionWeatherType","childDataWeather","sys","icon","basename","to","process","activeClassName","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wiBAOqBA,E,4MAEjBC,MAAQ,CACJC,UAAMC,EACNC,eAAWD,EACXE,QAAS,I,EAyCbC,wBAA0B,SAACD,EAASE,IAE5BF,EAAQG,QAA6B,IAAnBH,EAAQG,SAAiBD,EAAMC,OAAS,EAC1DC,SAASC,cAAc,mBAAmBC,UAAUC,IAAI,QAGxDH,SAASC,cAAc,mBAAmBC,UAAUE,OAAO,S,EAKnEC,kBAAoB,SAACC,GAEjB,EAAKC,SAAS,CACVd,KAAMa,IAGVN,SAASC,cAAc,WAAWO,MAAQ,GAC1CR,SAASC,cAAc,mBAAmBC,UAAUE,OAAO,QAE3DK,YAAW,WACP,EAAKC,4BAA4BJ,KAClC,M,EAIPI,4BAA8B,WAE1B,EAAKC,MAAMC,yBAAyB,EAAKpB,Q,gHAlEbqB,G,gFACtBf,EAAQe,EAAMC,OAAON,MACrBO,EAAgB,KAEnBjB,EAAMC,QAAU,G,gCAEIiB,IAAMC,IAAN,8EAAiFnB,EAAjF,mBAhBhB,gD,OAgBGoB,E,OAGoB,KAFpBC,EAAcD,EAAKA,KAAKC,aAEfpB,SAEXoB,EAAYC,KAAI,SAACC,GAEb,GAAoC,WAAhCA,EAAiBC,iBAAiE5B,IAApC2B,EAAiBE,QAAQC,OAAqB,CAE5F,IAAIC,EAAuB,CACvBC,KAAML,EAAiBE,QAAQC,OAC/BG,QAASC,IAAeP,EAAiBQ,cAG7C,OAAOd,EAAce,KAAKL,GAG1B,OAAO,QAIfM,KAAKxB,SAAS,CACVd,KAAMK,EACNH,WAAW,EACXC,QAASmB,K,OAKrBgB,KAAKlC,wBAAwBkB,EAAejB,G,sIAmCrC,IAAD,OAEEF,EAAYmC,KAAKvC,MAAjBI,QAER,OAEI,yBAAKoC,UAAU,oBACX,2BAAOA,UAAU,SAASC,KAAK,OAAOC,YAAY,wCAAyCC,SAAW,SAACtB,GAAD,OAAW,EAAKuB,yBAAyBvB,MAC/I,4BAAQmB,UAAU,gBAAgBK,QAAU,kBAAM,EAAK3B,gCAAvD,UACA,yBAAKsB,UAAU,kBAEI,IAAnBpC,EAAQG,OACRH,EAAQwB,KAAK,SAACd,EAAQgC,GAClB,OACA,uBAAGN,UAAU,gBAAgBO,IAAK,SAAWD,EAAOD,QAAU,kBAAM,EAAKhC,kBAAkBC,EAAOoB,KAAO,IAAMpB,EAAOqB,WAAtH,IAAoIrB,EAAOoB,KAAO,KAAOpB,EAAOqB,QAAhK,QAGF,uBAAGK,UAAU,iBAAb,oB,GA/FkBQ,a,uBCFfC,G,kNAEjBjD,MAAQ,CACJG,WAAW,G,uDAIX,OACI,yBAAKqC,UAAU,kBACf,kBAAC,eAAD,CAAcU,MAAO,QAASC,QAAUZ,KAAKvC,MAAMG,UAAYqC,UAAU,gB,GATjDQ,cCQfI,E,4MAEjBC,YAAa,E,EAEbrD,MAAQ,CACJG,UAAW,EAAKgB,MAAMhB,W,EAmB1BmD,cAAgB,WAEZ,GAAG,EAAKtD,MAAMG,UAEV,OAAO,kBAAC,EAAD,O,EAMfoD,kBAAoB,WAEhB,IAAIC,EAAW,EAAKrC,MAAMsC,KACtBC,EAAU,IAAIC,KAAgB,IAAXH,GACnBI,EAAUF,EAAQG,eAClBJ,EAAOG,EAAQE,MAAM,EAAGF,EAAQrD,QAChCwD,EAAOL,EAAQM,eAAeF,MAAM,GAAI,IACxCG,EAAML,EAAQE,MAAM,EAAG,GAE3B,EAAK/C,SAAS,CACV0C,KAAMA,EACNM,KAAMA,EACNE,IAAKA,K,EAKbC,kBAAoB,SAACC,GAEjB,IAAIC,EAEJ,OAAQD,GACJ,IAAK,SACDC,EAAe,kBAAC,IAAD,CAAQ5B,UAAU,SACrC,MACA,IAAK,QACD4B,EAAe,kBAAC,IAAD,CAAO5B,UAAU,SACpC,MACA,IAAK,OAGL,IAAK,UACD4B,EAAe,kBAAC,IAAD,CAAM5B,UAAU,SACnC,MACA,IAAK,OACD4B,EAAe,kBAAC,IAAD,CAAM5B,UAAU,SACnC,MACA,IAAK,OACD4B,EAAe,kBAAC,IAAD,CAAM5B,UAAU,SACnC,MACA,QACI4B,EAAe,kBAAC,IAAD,CAAM5B,UAAU,SAGvC,OAAO4B,G,EAIXC,uBAAyB,WAErB,IAAIC,EAAc,EAAKnD,MAAMoD,KAAKC,OAAO,GAAGC,cAAgB,EAAKtD,MAAMoD,KAAKT,MAAM,GAElF,EAAK/C,SAAS,CACVwD,KAAMD,K,kEA7EP/B,KAAKvC,MAAMG,UAEVoC,KAAKe,iBAKLf,KAAKgB,oBACLhB,KAAK8B,4B,+BA0EJ,IAAD,EACmD9B,KAAKpB,MAApDlB,EADJ,EACIA,KAAMkC,EADV,EACUA,QAASuC,EADnB,EACmBA,MAAOC,EAD1B,EAC0BA,MAAOC,EADjC,EACiCA,KAAMT,EADvC,EACuCA,QADvC,EAE8B5B,KAAKvC,MAA/ByD,EAFJ,EAEIA,KAAMM,EAFV,EAEUA,KAAMQ,EAFhB,EAEgBA,KAAMN,EAFtB,EAEsBA,IAE1B,OAEI,yBAAKzB,UAAU,6BACTD,KAAKe,gBACP,wBAAId,UAAU,UAAWvC,EAAzB,MAAoCkC,GACpC,yBAAKK,UAAU,mBACX,wBAAIA,UAAU,OAAQyB,GACtB,2BAAKR,EAAL,MAAgBM,GACdxB,KAAK2B,kBAAkBC,GAEzB,wBAAI3B,UAAU,QAASkC,EAAvB,UACA,yCAAgBC,EAAhB,UACA,wBAAInC,UAAU,WAAW+B,GACzB,uBAAG/B,UAAU,aAAY,kBAAC,IAAD,OACzB,uBAAGA,UAAU,QAASoC,EAAtB,c,GA9GkB5B,aCDjB6B,G,wNAEjB7E,MAAQ,CAEJG,UAAW,EAAKgB,MAAMhB,W,EAW1B+D,kBAAoB,SAACC,GAEjB,IAAIC,EAEJ,OAAOD,GACH,IAAK,SACDC,EAAe,kBAAC,IAAD,CAAQ5B,UAAU,SACrC,MACA,IAAK,QACD4B,EAAe,kBAAC,IAAD,CAAO5B,UAAU,SACpC,MACA,IAAK,OAGL,IAAK,UACD4B,EAAe,kBAAC,IAAD,CAAM5B,UAAU,SACnC,MACA,IAAK,OACD4B,EAAe,kBAAC,IAAD,CAAM5B,UAAU,SACnC,MACA,IAAK,OACD4B,EAAe,kBAAC,IAAD,CAAM5B,UAAU,SACnC,MACA,QACI4B,EAAe,kBAAC,IAAD,CAAM5B,UAAU,cAGvC,OAAO4B,G,EAIXb,kBAAoB,WAEhB,IAAIC,EAAW,EAAKrC,MAAM2D,aAAarB,KAEnCG,EADU,IAAID,KAAgB,IAAXH,GACDK,eAClBJ,EAAOG,EAAQE,MAAM,EAAGF,EAAQrD,QAChC0D,EAAML,EAAQE,MAAM,EAAG,GAE3B,EAAK/C,SAAS,CACV0C,KAAMA,EACNQ,IAAKA,K,EAKbI,uBAAyB,WAErB,IAAIC,EAAc,EAAKnD,MAAM2D,aAAaP,KAAKC,OAAO,GAAGC,cAAgB,EAAKtD,MAAM2D,aAAaP,KAAKT,MAAM,GAE5G,EAAK/C,SAAS,CACVwD,KAAMD,K,kEAxDV/B,KAAK8B,yBACL9B,KAAKgB,sB,+BA8DA,IAAD,EACmChB,KAAKpB,MAAM2D,aAA1CJ,EADJ,EACIA,MAAOC,EADX,EACWA,MAAOC,EADlB,EACkBA,KAAMT,EADxB,EACwBA,QADxB,EAEwB5B,KAAKvC,MAAzBiE,EAFJ,EAEIA,IAAKR,EAFT,EAESA,KAAMc,EAFf,EAEeA,KAEnB,OAEI,6BACI,yBAAK/B,UAAW,mCACZ,4BAAMyB,GACN,2BAAKR,GACHlB,KAAK2B,kBAAkBC,GACzB,wBAAI3B,UAAU,QAASkC,EAAvB,UACA,yCAAgBC,EAAhB,UACA,wBAAInC,UAAU,WAAY+B,GAC1B,2BAAG,kBAAC,IAAD,OACH,uBAAG/B,UAAU,QAASoC,EAAtB,c,GAxFwB5B,c,QCHtC+B,EAASC,EAAID,OAEE3B,E,4MAEjBpD,MAAQ,CACJG,UAAW,EAAKgB,MAAMhB,UACtB8E,oBAAqB,I,EAmBzB3B,cAAgB,WAEZ,GAAG,EAAKtD,MAAMG,UACV,OAAO,kBAAC,EAAD,O,EA0Cf+E,kBAAoB,WAEhB,EAAKC,wBAAwB,EAAKhE,MAAMlB,O,EAI5CmF,2BAA6B,WAsBzB,OApBgC,EAAKpF,MAA7BiF,oBAEsCrD,KAAI,SAAEyD,EAAgBvC,GAChE,OAAGA,EAAQ,IAAM,EAIT,kBAAC,EAAD,CAAgBC,IAAM,YAAcD,EAAQ3C,UAAY,EAAKH,MAAMG,UAAY2E,aAAeO,IAO3F,S,kEAjFZ9C,KAAKpB,MAAMlB,OAEVsC,KAAK4C,wBAAwB5C,KAAKpB,MAAMlB,MAErCsC,KAAKvC,MAAMG,WAEVoC,KAAKe,mB,uFAgBarD,G,yFAEPuB,IAAMC,IAAN,6DAAgExB,EAAhE,kBAA8E8E,EAA9E,kB,OAAbrD,E,OAEF4D,EAA0B5D,EAAKA,KAAK6D,KAAK3D,KAAK,SAAAyD,GAqB9C,MAnByB,CAEzB5B,KAAM4B,EAAeG,GACrBvF,KAAMyB,EAAKA,KAAKzB,KAAKiC,KACrBC,QAAST,EAAKA,KAAKzB,KAAKkC,QACxBgC,QAASkB,EAAelB,QAAQ,GAAGsB,KACnClB,KAAMc,EAAelB,QAAQ,GAAGG,YAChCI,MAAOW,EAAeI,KAAKC,KAC3Bf,MAAOU,EAAeI,KAAKE,WAC3BC,QAASP,EAAeI,KAAKI,SAC7BC,QAAST,EAAeI,KAAKM,SAC7BC,SAAUX,EAAeI,KAAKO,SAC9BC,OAAQZ,EAAeY,OAAOC,IAC9BtB,KAAMS,EAAeT,KAAKuB,MAC1BC,QAAS1E,EAAKA,KAAKzB,KAAKmG,QACxBC,OAAQ3E,EAAKA,KAAKzB,KAAKoG,WAQ3B9D,KAAKxB,SAAS,CAEVkE,oBAAqBK,EACrBnF,WAAW,I,sIAoCV,IAAD,EAEsBoC,KAAKpB,MAAvBlB,EAFJ,EAEIA,KAAMkC,EAFV,EAEUA,QAEd,OAEI,yBAAKK,UAAU,sBACX,wBAAIA,UAAU,UAAWvC,EAAO,MAAQkC,GAEtCI,KAAKe,gBACP,yBAAKd,UAAU,YACTD,KAAK6C,mC,GA9GWpC,aCGhC+B,EAASC,EAAID,OAEEuB,E,4MAEnBtG,MAAQ,CAENG,WAAW,EACXF,KAAM,aACNkC,aAASjC,EACTiE,aAASjE,EACTqE,UAAMrE,EACNwE,MAAO,KACPC,MAAO,KACPiB,QAAS,KACTE,QAAS,KACTE,SAAU,KACVC,OAAQ,KACRrB,KAAM,KACNwB,QAAS,KACTC,OAAQ,M,EA2CVnC,kBAAoB,SAACC,GAEnB3D,SAASC,cAAc,QAAQ+B,UAAY,OAAS2B,G,EAItDoC,iCAAmC,SAACC,GAElC,EAAKzF,SAAS,CACZd,KAAMuG,EAAgBvG,KACtBE,UAAWqG,EAAgBrG,YAG7B,EAAKsG,8BAA8BD,EAAgBvG,O,EAIrDyG,kCAAoC,SAACC,GAEnC,EAAK5F,SAAS,CACZoD,QAASwC,K,kEAzDRpE,KAAKvC,MAAMC,MAEZsC,KAAKkE,8BAA8BlE,KAAKvC,MAAMC,Q,6FAMdA,G,uFAEfuB,IAAMC,IAAN,4DAA+DxB,EAA/D,kBAA6E8E,EAA7E,kB,OAAbrD,E,OAENa,KAAKxB,SAAU,CAEX0C,KAAM/B,EAAKA,KAAK8D,GAChBvF,KAAMyB,EAAKA,KAAKQ,KAChBC,QAAST,EAAKA,KAAKkF,IAAIzE,QACvBgC,QAASzC,EAAKA,KAAKyC,QAAQ,GAAGsB,KAC9BlB,KAAM7C,EAAKA,KAAKyC,QAAQ,GAAGG,YAC3BuC,KAAMnF,EAAKA,KAAKyC,QAAQ,GAAG0C,KAC3BnC,MAAOhD,EAAKA,KAAK+D,KAAKC,KACtBf,MAAOjD,EAAKA,KAAK+D,KAAKE,WACtBC,QAASlE,EAAKA,KAAK+D,KAAKI,SACxBC,QAASpE,EAAKA,KAAK+D,KAAKM,SACxBC,SAAUtE,EAAKA,KAAK+D,KAAKO,SACzBC,OAAQvE,EAAKA,KAAKuE,OAAOC,IACzBtB,KAAMlD,EAAKA,KAAKkD,KAAKuB,MACrBC,QAAS1E,EAAKA,KAAKkF,IAAIR,QACvBC,OAAQ3E,EAAKA,KAAKkF,IAAIP,OACtBlG,WAAW,IAIfoC,KAAK2B,kBAAkB3B,KAAKvC,MAAMmE,S,sIA6BzB,IAAD,OAER,OAEE,kBAAC,IAAD,CAAQ2C,SAAU,KAChB,yBAAKtE,UAAU,OACb,yBAAKA,UAAU,kCACf,yBAAKA,UAAU,cACb,4BAAQA,UAAU,cAClB,kBAAC,IAAD,CAAMuE,GAAE,UAAKC,4BAAL,MAAgC,gDAAyB,yBAAKxE,UAAU,QAAO,kBAAC,IAAD,OAAvF,MAEI,4BACI,4BACA,kBAAC,IAAD,CAASyE,gBAAgB,SAASF,GAAE,UAAKC,4BAAL,KAAgCE,OAAK,GAAzE,oBAEA,4BACA,kBAAC,IAAD,CAASD,gBAAgB,SAASF,GAAE,UAAKC,4BAAL,cAApC,oBAGJ,kBAAE,EAAF,CAAS5F,yBAA6BmB,KAAKgE,oCAEjD,8BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAI,UAAKH,4BAAL,KAAgCI,UAAY,SAACjG,GAAD,OAAW,kBAAC,EAAD,iBAAoBA,EAAW,EAAKnB,MAApC,CAA2CmE,QAAU,EAAKnE,MAAMmE,cACxI,kBAAC,IAAD,CAAO+C,OAAK,EAACC,KAAI,UAAKH,4BAAL,aAAwCI,UAAY,SAACjG,GAAD,OAAW,kBAAC,EAAD,iBAAcA,EAAd,CAAqBlB,KAAO,EAAKD,MAAMC,KAAOE,UAAY,EAAKH,MAAMG,UAAYgC,QAAU,EAAKnC,MAAMmC,iBAKxL,uF,GAlHuBa,aCJbqE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnH,SAASoH,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc593b09.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Search.css\";\nimport Axios from \"axios\";\nimport getCountryISO2 from \"country-iso-3-to-2\";\n\nconst APIkey = \"cB21szIO9BPCX6bU9ZYfWRg0ttZ9ugXptQxsJXUsVA4\";\n\nexport default class Search extends Component {\n\n    state = {\n        city: undefined,\n        isLoading: undefined, \n        results: []\n    }\n\n    async handleFetchSearchResults (event) {\n        const input = event.target.value;\n        const searchResults = [];\n\n        if(input.length >= 2){\n            \n            const data = await Axios.get(`https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json?query=${input}&apiKey=${APIkey}`);\n            const suggestions = data.data.suggestions;\n\n            if(suggestions.length !== 0){\n\n                suggestions.map((singleSuggestion) => {\n\n                    if((singleSuggestion.matchLevel === \"county\" ) && singleSuggestion.address.county !== undefined){\n\n                        let singleSuggestionData = {\n                            name: singleSuggestion.address.county,\n                            country: getCountryISO2(singleSuggestion.countryCode)\n                        }\n\n                        return searchResults.push(singleSuggestionData);\n                    }\n                    else {\n                        return null;\n                    }        \n                });\n            \n                this.setState({\n                    city: input,\n                    isLoading: true,\n                    results: searchResults\n                });\n            }\n        } \n\n        this.handleShowSearchResults(searchResults, input);\n    }\n\n    handleShowSearchResults = (results, input) => {\n\n        if((results.length || results.length === 0) && input.length > 1){\n            document.querySelector(\".Search-results\").classList.add(\"show\");\n        } \n        else {\n            document.querySelector(\".Search-results\").classList.remove(\"show\");\n        }\n\n   }\n\n    handleClearSearch = (result) => {\n\n        this.setState({\n            city: result\n        });\n\n        document.querySelector(\".Search\").value = \"\";\n        document.querySelector(\".Search-results\").classList.remove(\"show\");\n\n        setTimeout(() => {\n            this.handleSendSearchRequestData(result);\n        }, 200);\n\n    }\n\n    handleSendSearchRequestData = () => {\n\n        this.props.parentCallbackSearchData(this.state);\n\n   }\n\n    render () {\n\n        const { results } = this.state;\n\n        return (\n\n            <div className=\"Search-container\">\n                <input className=\"Search\" type=\"text\" placeholder=\"Search by typing the name of the city\"  onChange={ (event) => this.handleFetchSearchResults(event) }/>\n                <button className=\"Search-button\" onClick={ () => this.handleSendSearchRequestData() }>Search</button>\n                <div className=\"Search-results\">\n                {   \n                results.length !== 0 ?\n                results.map( (result, index) => {\n                    return (\n                    <p className=\"Search-result\" key={\"result\" + index} onClick={ () => this.handleClearSearch(result.name + \",\" + result.country) }> { result.name + \", \" + result.country } </p> \n                    );\n                })\n                : <p className=\"Search-result\">No results</p> \n                }\n                </div>\n            </div>\n\n        );\n    }\n}","import React, { Component } from \"react\";\n\nimport { BounceLoader } from 'react-spinners';\nimport './Loader.css';\n\nexport default class Loader extends Component {\n\n    state = {\n        isLoading: true\n    };\n\n    render () {\n        return (\n            <div className=\"Loader-wrapper\">\n            <BounceLoader color={'white'} loading={ this.state.isLoading } className=\"Loader\" />\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport \"./CurrentWeather.css\";\n\nimport { FaSun as Clear } from \"react-icons/fa\";\nimport { FaCloud as Clouds } from \"react-icons/fa\";\nimport { FaCloudRain as Rain } from \"react-icons/fa\";\nimport { FaWind as Wind } from \"react-icons/fa\";\nimport { FaSnowflake as Snow } from \"react-icons/fa\";\nimport { FaWind as Mist } from \"react-icons/fa\";\nimport { FaCloudSunRain as Logo } from \"react-icons/fa\";\n\nimport Loader from \"../../components/Loader/Loader\";\n\nexport default class Forecast extends Component {\n\n    _isMounted = false;\n\n    state = {\n        isLoading: this.props.isLoading\n    }\n\n    componentDidMount(){\n\n        if(this.state.isLoading){\n\n            this.handleLoading();\n\n        }\n       else {\n\n            this.handleConvertDate();\n            this.handleCapitalizeString();\n\n       }\n        \n    }\n\n    handleLoading = () => {\n\n        if(this.state.isLoading){\n\n            return <Loader/>;\n\n        }\n\n    } \n\n    handleConvertDate = () => {\n\n        let unixDate = this.props.date;\n        let dateObj = new Date(unixDate * 1000);\n        let dateStr = dateObj.toDateString();\n        let date = dateStr.slice(4, dateStr.length);\n        let time = dateObj.toTimeString().slice(0, -41);\n        let day = dateStr.slice(0, 4);\n\n        this.setState({\n            date: date,\n            time: time,\n            day: day\n        });\n    \n    }\n\n    handleWeatherType = (weather) => {\n\n        let iconToRender;\n\n        switch( weather ){\n            case \"Clouds\": \n                iconToRender = <Clouds className=\"Icon\"/>;\n            break;\n            case \"Clear\":\n                iconToRender = <Clear className=\"Icon\"/>;\n            break;\n            case \"Rain\":\n                iconToRender = <Rain className=\"Icon\"/>;\n            break;\n            case \"Drizzle\":\n                iconToRender = <Rain className=\"Icon\"/>;\n            break;\n            case \"Snow\":\n                iconToRender = <Snow className=\"Icon\"/>;\n            break;\n            case \"Mist\":\n                iconToRender = <Mist className=\"Icon\"></Mist>;\n            break;\n            default:\n                iconToRender = <Logo className=\"Logo\"></Logo>\n        }\n        \n        return iconToRender;\n\n    }\n\n    handleCapitalizeString = () => {\n\n        let description = this.props.desc.charAt(0).toUpperCase() + this.props.desc.slice(1);\n        \n        this.setState({\n            desc: description\n        });\n\n    } \n\n    render(){\n        const { city, country, aTemp, fTemp, wind, weather } = this.props;\n        const { date, time, desc, day } = this.state;\n\n        return(\n\n            <div className=\"Current-weather-container\"> \n                { this.handleLoading() }\n                <h1 className=\"Header\">{ city } | { country }</h1>\n                <div className=\"Current-weather\">\n                    <h2 className=\"Day\">{ day }</h2>\n                    <p>{ date } | { time }</p>\n                    { this.handleWeatherType(weather) }\n                    \n                    <h2 className=\"Temp\">{ aTemp } °c</h2>\n                    <p>Feels like { fTemp } °c</p>\n                    <h2 className=\"Weather\">{desc}</h2>\n                    <p className=\"Wind-icon\"><Wind/></p>\n                    <p className=\"Wind\">{ wind } m/s</p>\n                </div>    \n            </div>\n            \n        );\n    }\n}","import React, { Component } from \"react\";\n\nimport { FaSun as Clear } from \"react-icons/fa\";\nimport { FaCloud as Clouds } from \"react-icons/fa\";\nimport { FaCloudRain as Rain } from \"react-icons/fa\";\nimport { FaWind as Wind } from \"react-icons/fa\";\nimport { FaSnowflake as Snow } from \"react-icons/fa\";\nimport { FaWind as Mist } from \"react-icons/fa\";\nimport { FaCloudSunRain as Logo } from \"react-icons/fa\";\n\nimport \"./SingleForecast.css\";\n\nexport default class SingleForecast extends Component {\n\n    state = {\n\n        isLoading: this.props.isLoading\n\n    }\n\n    componentDidMount(){\n\n        this.handleCapitalizeString();\n        this.handleConvertDate();\n\n    }\n\n    handleWeatherType = (weather) => {\n        \n        let iconToRender;\n\n        switch(weather){\n            case \"Clouds\": \n                iconToRender = <Clouds className=\"Icon\"/>;\n            break;\n            case \"Clear\":\n                iconToRender = <Clear className=\"Icon\"/>;\n            break;\n            case \"Rain\":\n                iconToRender = <Rain className=\"Icon\"/>;\n            break;\n            case \"Drizzle\":\n                iconToRender = <Rain className=\"Icon\"/>;\n            break;\n            case \"Snow\":\n                iconToRender = <Snow className=\"Icon\"/>;\n            break;\n            case \"Mist\":\n                iconToRender = <Mist className=\"Icon\"></Mist>;\n            break;\n            default:\n                iconToRender = <Logo className=\"Logo Icon\"></Logo>\n        }\n        \n        return iconToRender;\n    \n    }\n\n    handleConvertDate = () => {\n\n        let unixDate = this.props.forecastData.date;\n        let dateObj = new Date(unixDate * 1000);\n        let dateStr = dateObj.toDateString();\n        let date = dateStr.slice(4, dateStr.length);\n        let day = dateStr.slice(0, 4);\n\n        this.setState({\n            date: date,\n            day: day\n        });\n    \n    }\n\n    handleCapitalizeString = () => {\n\n        let description = this.props.forecastData.desc.charAt(0).toUpperCase() + this.props.forecastData.desc.slice(1);\n\n        this.setState({\n            desc: description\n        });\n        \n    } \n\n\n\n    render(){\n        const { aTemp, fTemp, wind, weather} = this.props.forecastData;\n        const { day, date, desc } = this.state;\n\n        return(\n\n            <div>\n                <div className={\"Single-forecast Current-weather\"}>\n                    <h3>{ day }</h3>\n                    <p>{ date }</p>\n                    { this.handleWeatherType(weather) }\n                    <h2 className=\"Temp\">{ aTemp } °c</h2>\n                    <p>Feels like { fTemp } °c</p>\n                    <h2 className=\"Weather\">{ desc }</h2>\n                    <p><Wind/></p>\n                    <p className=\"Wind\">{ wind } m/s</p>\n                </div>    \n            </div> \n\n        );\n    }\n}","import React, { Component } from \"react\";\n\nimport \"./Forecast.css\";\nimport SingleForecast from \"./SingleForecast\";\n\nimport Loader from \"../../components/Loader/Loader\";\n\nimport Axios from \"axios\";\nimport Key from \"./../../data/api.json\";\nconst APIkey = Key.APIkey;\n\nexport default class Forecast extends Component {\n\n    state = {\n        isLoading: this.props.isLoading,\n        currentForecastList: []\n    }\n\n    componentDidMount(){\n        \n        if(this.props.city){\n\n            this.handleFetchForecastData(this.props.city);\n\n            if(this.state.isLoading){\n\n                this.handleLoading();\n    \n            }\n            \n        } \n        \n    }\n\n    handleLoading = () => {\n\n        if(this.state.isLoading){\n            return <Loader/>;\n        }\n\n    } \n    \n    async handleFetchForecastData(city){\n        \n        const data = await Axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${APIkey}&units=metric`);\n\n        let fiveDayForecastListData = data.data.list.map( singleForecast => {\n\n            let singleForecastData = {\n\n            date: singleForecast.dt,\n            city: data.data.city.name,\n            country: data.data.city.country,\n            weather: singleForecast.weather[0].main,\n            desc: singleForecast.weather[0].description,\n            aTemp: singleForecast.main.temp,\n            fTemp: singleForecast.main.feels_like,\n            minTemp: singleForecast.main.temp_min,\n            maxTemp: singleForecast.main.temp_max,\n            humidity: singleForecast.main.humidity,\n            clouds: singleForecast.clouds.all,\n            wind: singleForecast.wind.speed,\n            sunrise: data.data.city.sunrise,\n            sunset: data.data.city.sunset\n\n            }\n\n            return singleForecastData;\n\n        });\n    \n        this.setState({\n\n            currentForecastList: fiveDayForecastListData,\n            isLoading: false \n\n        });\n    }\n\n    handleSearchInput = () => {\n\n        this.handleFetchForecastData(this.props.city);\n\n    }\n\n    handleRenderSingleForecast = () => {\n\n        const { currentForecastList } = this.state;\n        \n        let fiveDayForecastList = currentForecastList.map(( singleForecast, index ) => {\n            if(index % 8 === 0){\n\n                return( \n\n                    <SingleForecast key={ \"forecast-\" + index } isLoading={ this.state.isLoading } forecastData={ singleForecast } />\n\n                );\n\n            }\n            else {\n\n                return null;\n\n            }\n\n        });\n\n        return fiveDayForecastList;\n    }\n\n    render(){\n\n        const { city, country } = this.props;\n        \n        return(\n\n            <div className=\"Forecast-container\">\n                <h1 className=\"Header\">{ city + \" | \" + country }</h1>\n                \n                { this.handleLoading() }\n                <div className=\"Forecast\">\n                    { this.handleRenderSingleForecast() }\n                </div>\n            </div>\n            \n        );\n    }\n}","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Switch, Route, Link, NavLink } from \"react-router-dom\";\n\nimport Search from \"./components/Search/Search\";\n\nimport CurrentWeather from \"./pages/CurrentWeather/CurrentWeather\";\nimport Forecast from \"./pages/Forecast/Forecast\";\n\nimport { FaCloudSunRain as Logo } from \"react-icons/fa\";\n\nimport Axios from \"axios\";\nimport Key from \"./data/api.json\";\nconst APIkey = Key.APIkey;\n\nexport default class App extends Component {\n\n  state = {\n\n    isLoading: true,\n    city: \"Copenhagen\",\n    country: undefined,\n    weather: undefined,\n    desc: undefined,\n    aTemp: null,\n    fTemp: null,\n    minTemp: null,\n    maxTemp: null,\n    humidity: null,\n    clouds: null,\n    wind: null,\n    sunrise: null,\n    sunset: null\n    \n  }\n\n  componentDidMount(){\n\n    if(this.state.city){\n\n      this.handleFetchCurrentWeatherData(this.state.city);\n\n    }  \n\n  }\n\n  async handleFetchCurrentWeatherData(city){\n\n    const data = await Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${APIkey}&units=metric`);\n\n    this.setState( {\n\n        date: data.data.dt,\n        city: data.data.name,\n        country: data.data.sys.country,\n        weather: data.data.weather[0].main,\n        desc: data.data.weather[0].description,\n        icon: data.data.weather[0].icon,\n        aTemp: data.data.main.temp,\n        fTemp: data.data.main.feels_like,\n        minTemp: data.data.main.temp_min,\n        maxTemp: data.data.main.temp_max,\n        humidity: data.data.main.humidity,\n        clouds: data.data.clouds.all,\n        wind: data.data.wind.speed,\n        sunrise: data.data.sys.sunrise,\n        sunset: data.data.sys.sunset,\n        isLoading: false\n\n    } );\n\n    this.handleWeatherType(this.state.weather);\n\n  }\n\n  handleWeatherType = (weather) => {\n\n    document.querySelector(\".App\").className = \"App \" + weather;\n\n  }\n\n  handleCallbackFunctionSearchData = (childDataSearch) => {\n\n    this.setState({\n      city: childDataSearch.city,\n      isLoading: childDataSearch.isLoading\n    });\n\n    this.handleFetchCurrentWeatherData(childDataSearch.city);\n    \n  }\n\n  handleCallBackFunctionWeatherType = (childDataWeather) => {\n\n    this.setState({\n      weather: childDataWeather\n    });\n\n  }\n\n  render () {   \n\n    return (\n\n      <Router basename={\"/\"}>\n        <div className=\"App\">\n          <div className=\"Grid-container Grid-two-thirds\">  \n          <nav className=\"Navigation\">\n            <header className=\"App-header\">\n            <Link to={`${process.env.PUBLIC_URL}/`}><h1>In Rain or Shine</h1><div className=\"Logo\"><Logo/></div> </Link>\n            </header>\n                <ul>\n                    <li>\n                    <NavLink activeClassName=\"active\" to={`${process.env.PUBLIC_URL}/`} exact>Current Weather</NavLink>\n                    </li>\n                    <li>\n                    <NavLink activeClassName=\"active\" to={`${process.env.PUBLIC_URL}/forecast`}>5-day Forecast</NavLink>\n                    </li>\n                </ul>\n                < Search parentCallbackSearchData = { this.handleCallbackFunctionSearchData }/>\n          </nav>\n          <main>\n          <Switch>\n            <Route exact path={`${process.env.PUBLIC_URL}/`} component={ (props) => <CurrentWeather {...props} {...this.state} weather={ this.state.weather } /> }/>\n            <Route exact path={`${process.env.PUBLIC_URL}/forecast`} component={ (props) => <Forecast {...props} city={ this.state.city } isLoading={ this.state.isLoading } country={ this.state.country } /> }/>\n          </Switch>\n          </main>\n          </div>  \n\n          <footer>\n            This Weather App is created by Mathilde Runge\n          </footer>\n        </div>\n      </Router>\n        \n    );\n\n  }\n  \n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}